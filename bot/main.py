import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from bot.config import BOT_TOKEN, ADMINS, OWNER_ID
from bot.db import SessionLocal, User, Hike, Route, HikeParticipant, UserAchievement, Achievement, AdminLog
from sqlalchemy import select
from datetime import datetime, date
from aiogram.utils.markdown import hlink
import aiohttp
from aiogram import filters
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class RegStates(StatesGroup):
    name = State()
    phone = State()
    age = State()

class AddRouteStates(StatesGroup):
    name = State()
    distance = State()
    elevation = State()
    description = State()
    difficulty = State()
    latitude = State()
    longitude = State()

class EditRouteStates(StatesGroup):
    route_id = State()
    name = State()
    distance = State()
    elevation = State()
    description = State()
    difficulty = State()
    latitude = State()
    longitude = State()

class NewHikeStates(StatesGroup):
    route_id = State()
    hike_date = State()

class CompleteHikeStates(StatesGroup):
    hike_id = State()
    completed_ids = State()

class BroadcastStates(StatesGroup):
    text = State()

class EditStatsStates(StatesGroup):
    user_id = State()
    field = State()
    value = State()

def get_rank(hikes_count, total_distance):
    # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–Ω–≥–æ–≤
    if hikes_count >= 50 or total_distance >= 1000:
        return "–ü–æ–∫–æ—Ä–∏—Ç–µ–ª—å"
    elif hikes_count >= 20 or total_distance >= 500:
        return "–°–∫–∞—É—Ç"
    elif hikes_count >= 10:
        return "–¢—É—Ä–∏—Å—Ç"
    elif hikes_count >= 3:
        return "–ù–æ–≤–∏—á–æ–∫+"
    else:
        return "–ù–æ–≤–∏—á–æ–∫"

ACHIEVEMENTS = [
    {"name": "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏", "desc": "5 –ø–æ—Ö–æ–¥–æ–≤", "icon": "üö∂", "cond": lambda u, ctx: u.hikes_count >= 5},
    {"name": "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π —Ç—É—Ä–∏–∑–º", "desc": "10 –ø–æ—Ö–æ–¥–æ–≤", "icon": "ü•à", "cond": lambda u, ctx: u.hikes_count >= 10},
    {"name": "–ó–æ–ª–æ—Ç–æ–π —Ç—Ä–µ–∫–∫–µ—Ä", "desc": "50 –ø–æ—Ö–æ–¥–æ–≤", "icon": "ü•á", "cond": lambda u, ctx: u.hikes_count >= 50},
    {"name": "100 –∫–º", "desc": "100 –∫–º —Å—É–º–º–∞—Ä–Ω–æ", "icon": "üèÖ", "cond": lambda u, ctx: u.total_distance >= 100},
    {"name": "500 –∫–º", "desc": "500 –∫–º —Å—É–º–º–∞—Ä–Ω–æ", "icon": "üèÜ", "cond": lambda u, ctx: u.total_distance >= 500},
    {"name": "–í—ã—Å–æ—Ç–æ–º–µ—Ä", "desc": "10 000 –º –Ω–∞–±–æ—Ä–∞", "icon": "‚õ∞Ô∏è", "cond": lambda u, ctx: u.total_elevation >= 10000},
    {"name": "–ü–µ—Ä–≤—ã–π –ø–æ—Ö–æ–¥", "desc": "–ü–µ—Ä–≤–æ–µ —É—á–∞—Å—Ç–∏–µ", "icon": "üö∂", "cond": lambda u, ctx: u.hikes_count == 1},
    {"name": "3 –ø–æ–¥—Ä—è–¥", "desc": "3 –ø–æ—Ö–æ–¥–∞ –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤", "icon": "üîó", "cond": lambda u, ctx: ctx.get('streak', 0) >= 3},
    {"name": "–°–ª–æ–∂–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç", "desc": "–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞", "icon": "üßó", "cond": lambda u, ctx: ctx.get('hard_route', False)},
    {"name": "–ü–æ–∫–æ—Ä–∏—Ç–µ–ª—å –≤—ã—Å–æ—Ç", "desc": "20 000 –º –Ω–∞–±–æ—Ä–∞", "icon": "üèîÔ∏è", "cond": lambda u, ctx: u.total_elevation >= 20000},
    {"name": "–í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –∫–ª—É–±–∞", "desc": "–ü—Ä–æ–π–¥–µ–Ω –∫–∞–∂–¥—ã–π –º–∞—Ä—à—Ä—É—Ç", "icon": "üåç", "cond": lambda u, ctx: ctx.get('all_routes', False)},
]

async def check_achievements(session, user, context=None):
    context = context or {}
    res = await session.execute(
        select(Achievement, UserAchievement).join(UserAchievement, Achievement.id == UserAchievement.achievement_id, isouter=True)
        .where(UserAchievement.user_id == user.id)
    )
    got = {a.name for a, ua in res if ua}
    new_ach = []
    for ach in ACHIEVEMENTS:
        if ach["name"] not in got and ach["cond"](user, context):
            res2 = await session.execute(select(Achievement).where(Achievement.name == ach["name"]))
            a = res2.scalar_one_or_none()
            if not a:
                a = Achievement(name=ach["name"], description=ach["desc"], icon=ach["icon"])
                session.add(a)
                await session.commit()
            ua = UserAchievement(user_id=user.id, achievement_id=a.id)
            session.add(ua)
            await session.commit()
            new_ach.append(a)
    return new_ach

async def get_weather_forecast(lat, lon, target_date):
    url = (
        f"https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}"
        f"&daily=temperature_2m_min,temperature_2m_max,precipitation_sum,windspeed_10m_max"
        f"&timezone=auto&start_date={target_date}&end_date={target_date}"
    )
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            data = await resp.json()
            daily = data.get("daily", {})
            if not daily or not daily.get("temperature_2m_min"):
                return None
            t_min = daily["temperature_2m_min"][0]
            t_max = daily["temperature_2m_max"][0]
            precip = daily["precipitation_sum"][0]
            wind = daily["windspeed_10m_max"][0]
            return t_min, t_max, precip, wind

async def send_hike_reminders():
    from asyncio import sleep
    while True:
        tomorrow = date.today().toordinal() + 1
        tomorrow_date = date.fromordinal(tomorrow)
        async with SessionLocal() as session:
            q = (
                select(Hike, Route)
                .join(Route, Hike.route_id == Route.id)
                .where(Hike.date == tomorrow_date)
            )
            hikes = await session.execute(q)
            hikes = hikes.all()
            for hike, route in hikes:
                # –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑
                if route.latitude is not None and route.longitude is not None:
                    weather = await get_weather_forecast(route.latitude, route.longitude, tomorrow_date)
                else:
                    weather = None
                # –ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                q2 = (
                    select(HikeParticipant, User)
                    .join(User, HikeParticipant.user_id == User.id)
                    .where(HikeParticipant.hike_id == hike.id, HikeParticipant.completed == 1)
                )
                participants = await session.execute(q2)
                participants = participants.all()
                for hp, user in participants:
                    if getattr(user, 'notifications_enabled', 1) != 1:
                        continue
                    msg = f"–ó–∞–≤—Ç—Ä–∞ –ø–æ—Ö–æ–¥ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É '{route.name}'!\n"
                    if weather:
                        t_min, t_max, precip, wind = weather
                        msg += (
                            f"–ü–æ–≥–æ–¥–∞: {t_min:.0f}‚Ä¶{t_max:.0f}¬∞C, –æ—Å–∞–¥–∫–∏: {precip:.1f} –º–º, –≤–µ—Ç–µ—Ä: {wind:.0f} –º/—Å.\n"
                        )
                        if t_min < 5:
                            msg += "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ç—ë–ø–ª–∞—è –æ–¥–µ–∂–¥–∞. "
                        if precip > 0:
                            msg += "–í–æ–∑–º–æ–∂–µ–Ω –¥–æ–∂–¥—å ‚Äî –≤–æ–∑—å–º–∏—Ç–µ –Ω–µ–ø—Ä–æ–º–æ–∫–∞–µ–º—É—é –æ–¥–µ–∂–¥—É. "
                    else:
                        msg += "(–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã)\n"
                    msg += "–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –∏ —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! ü•æ"
                    try:
                        await bot.send_message(user.telegram_id, msg)
                    except Exception:
                        pass
        await sleep(60*60*12)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤

async def log_admin_action(session, admin_id, action, details):
    log = AdminLog(admin_id=admin_id, action=action, details=details)
    session.add(log)
    await session.commit()

# –•–µ–ª–ø–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö
async def delete_later(message: types.Message, delay=15):
    try:
        await asyncio.sleep(delay)
        await message.delete()
    except Exception:
        pass

# –ú–∏–∫—Å–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö
async def auto_delete_reply(message: types.Message, text, **kwargs):
    reply = await message.answer(text, **kwargs)
    if message.chat.type in ("group", "supergroup"):
        asyncio.create_task(delete_later(reply))

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@dp.message(F.chat.type.in_(['group', 'supergroup']))
async def welcome_new_members(message: types.Message):
    if message.new_chat_members:
        for user in message.new_chat_members:
            if user.is_bot:
                continue
            await message.reply(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}!\n–≠—Ç–æ –±–æ—Ç –∫–ª—É–±–∞ –ø–æ—Ö–æ–¥–æ–≤. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –õ–° /start.")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç—ã")],
        [KeyboardButton(text="üö∂ –ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ—Ö–æ–¥—ã"), KeyboardButton(text="üèÜ –õ–∏–¥–µ—Ä—ã")],
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")],
    ],
    resize_keyboard=True
)

# Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
profile_inline = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤", callback_data="routes")],
    ]
)

@dp.message(flags={"block": False})
async def catch_unregistered(message: types.Message, state: FSMContext):
    # –ù–µ –º–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –∫–æ–º–∞–Ω–¥
    if message.text and message.text.startswith("/"):
        return
    current_state = await state.get_state()
    if current_state is not None:
        return  # –î–∞–π FSM –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    async with SessionLocal() as session:
        res = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = res.scalar_one_or_none()
        if not user:
            await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            await state.set_state(RegStates.name)

@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    print(f"–ü–æ–ª—É—á–µ–Ω /start –æ—Ç {message.from_user.id}")
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Ö–æ–¥–æ–≤. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –≤–Ω–∏–∑—É!",
        reply_markup=main_menu
    )
    await state.set_state(RegStates.name)

@dp.message(lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def menu_profile(message: types.Message):
    await profile(message)

@dp.message(lambda m: m.text == "üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç—ã")
async def menu_routes(message: types.Message):
    await routes_list(message)

@dp.message(lambda m: m.text == "üö∂ –ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ—Ö–æ–¥—ã")
async def menu_upcoming(message: types.Message):
    await upcoming_hikes(message)

@dp.message(lambda m: m.text == "üèÜ –õ–∏–¥–µ—Ä—ã")
async def menu_leaders(message: types.Message):
    await leaders(message)

@dp.message(lambda m: m.text == "‚ùì –ü–æ–º–æ—â—å")
async def menu_help(message: types.Message):
    await help_cmd(message)

@dp.callback_query(lambda c: c.data == "profile")
async def cb_profile(callback: types.CallbackQuery):
    await profile(callback.message)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "routes")
async def cb_routes(callback: types.CallbackQuery):
    await routes_list(callback.message)
    await callback.answer()

@dp.message(RegStates.name)
async def reg_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True))
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É)", reply_markup=kb
    )
    await state.set_state(RegStates.phone)

@dp.message(RegStates.phone, F.contact)
async def reg_phone_contact(message: types.Message, state: FSMContext):
    phone = message.contact.phone_number
    await state.update_data(phone=phone)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(RegStates.age)

@dp.message(RegStates.phone)
async def reg_phone_text(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not phone.replace('+', '').replace('-', '').isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π.")
        return
    await state.update_data(phone=phone)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(RegStates.age)

@dp.message(RegStates.age)
async def reg_age(message: types.Message, state: FSMContext):
    age_text = message.text.strip()
    if not age_text.isdigit() or not (6 <= int(age_text) <= 100):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (6-100).")
        return
    await state.update_data(age=int(age_text))
    data = await state.get_data()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    async with SessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
        res = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = res.scalar_one_or_none()
        if user:
            await message.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        else:
            user = User(
                telegram_id=message.from_user.id,
                name=data["name"],
                phone=data["phone"],
                age=data["age"]
            )
            session.add(user)
            await session.commit()
            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± –ø–æ—Ö–æ–¥–æ–≤! ü•æ")
    await state.clear()

# –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@dp.message(Command("profile"))
async def profile(message: types.Message):
    async with SessionLocal() as session:
        res = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = res.scalar_one_or_none()
        if not user:
            await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=main_menu)
            return
        ach_res = await session.execute(
            select(Achievement).join(UserAchievement).where(UserAchievement.user_id == user.id)
        )
        achievements = ach_res.scalars().all()
        ach_text = "\n".join([f"{a.icon} <b>{a.name}</b>" for a in achievements]) if achievements else "‚Äî"
        text = (
            f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å</b>\n"
            f"<b>–ò–º—è:</b> {user.name}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone}\n"
            f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {user.age}\n"
            f"\n"
            f"<b>üèÖ –†–∞–Ω–≥:</b> {user.rank}\n"
            f"<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"  ‚Ä¢ <b>–ö–∏–ª–æ–º–µ—Ç—Ä–∞–∂:</b> {user.total_distance:.1f} –∫–º\n"
            f"  ‚Ä¢ <b>–ù–∞–±–æ—Ä –≤—ã—Å–æ—Ç—ã:</b> {user.total_elevation} –º\n"
            f"  ‚Ä¢ <b>–ü–æ—Ö–æ–¥–æ–≤:</b> {user.hikes_count}\n"
            f"\n"
            f"<b>üéñ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n{ach_text}"
        )
        await message.answer(text, parse_mode="HTML", reply_markup=profile_inline)

@dp.message(Command("history"))
async def history(message: types.Message):
    async with SessionLocal() as session:
        res = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = res.scalar_one_or_none()
        if not user:
            await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        q = (
            select(Hike, Route)
            .join(HikeParticipant, HikeParticipant.hike_id == Hike.id)
            .join(Route, Hike.route_id == Route.id)
            .where(HikeParticipant.user_id == user.id)
            .order_by(Hike.date.desc())
        )
        hikes = await session.execute(q)
        hikes = hikes.all()
        if not hikes:
            await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–æ—Ö–æ–¥–æ–≤.")
            return
        lines = []
        for hike, route in hikes:
            lines.append(f"{hike.date:%d.%m.%Y} ‚Äî {route.name} ({route.distance} –∫–º, {route.elevation} –º)")
        await message.answer("\n".join(lines))

@dp.message(Command("routes"))
async def routes_list(message: types.Message):
    async with SessionLocal() as session:
        res = await session.execute(select(Route))
        routes = res.scalars().all()
        if not routes:
            await message.answer("–ú–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        lines = [f"{r.id}. {r.name} ‚Äî {r.distance} –∫–º, {r.elevation} –º, —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {r.difficulty}" for r in routes]
        await auto_delete_reply(message, "\n".join(lines))

@dp.message(Command("add_route"))
async def add_route_start(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞:")
    await state.set_state(AddRouteStates.name)

@dp.message(AddRouteStates.name)
async def add_route_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("–ü—Ä–æ—Ç—è–∂—ë–Ω–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞ (–∫–º):")
    await state.set_state(AddRouteStates.distance)

@dp.message(AddRouteStates.distance)
async def add_route_distance(message: types.Message, state: FSMContext):
    try:
        distance = float(message.text.replace(',', '.'))
        if distance <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∫–º), –Ω–∞–ø—Ä–∏–º–µ—Ä: 12.5")
        return
    await state.update_data(distance=distance)
    await message.answer("–°—É–º–º–∞—Ä–Ω—ã–π –Ω–∞–±–æ—Ä –≤—ã—Å–æ—Ç—ã (–º):")
    await state.set_state(AddRouteStates.elevation)

@dp.message(AddRouteStates.elevation)
async def add_route_elevation(message: types.Message, state: FSMContext):
    try:
        elevation = int(message.text)
        if elevation < 0:
            raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–º–µ—Ç—Ä—ã), –Ω–∞–ø—Ä–∏–º–µ—Ä: 800")
        return
    await state.update_data(elevation=elevation)
    await message.answer("–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞:")
    await state.set_state(AddRouteStates.description)

@dp.message(AddRouteStates.description)
async def add_route_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await message.answer("–°–ª–æ–∂–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ª—ë–≥–∫–∞—è, —Å—Ä–µ–¥–Ω—è—è, —Å–ª–æ–∂–Ω–∞—è):")
    await state.set_state(AddRouteStates.difficulty)

@dp.message(AddRouteStates.difficulty)
async def add_route_difficulty(message: types.Message, state: FSMContext):
    await state.update_data(difficulty=message.text.strip())
    await message.answer("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞ (—à–∏—Ä–æ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 42.876):")
    await state.set_state(AddRouteStates.latitude)

@dp.message(AddRouteStates.latitude)
async def add_route_latitude(message: types.Message, state: FSMContext):
    try:
        lat = float(message.text.replace(',', '.'))
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 42.876")
        return
    await state.update_data(latitude=lat)
    await message.answer("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞ (–¥–æ–ª–≥–æ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 74.605):")
    await state.set_state(AddRouteStates.longitude)

@dp.message(AddRouteStates.longitude)
async def add_route_longitude(message: types.Message, state: FSMContext):
    try:
        lon = float(message.text.replace(',', '.'))
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 74.605")
        return
    await state.update_data(longitude=lon)
    data = await state.get_data()
    async with SessionLocal() as session:
        route = Route(
            name=data["name"],
            distance=data["distance"],
            elevation=data["elevation"],
            description=data["description"],
            difficulty=data["difficulty"],
            latitude=data["latitude"],
            longitude=lon
        )
        session.add(route)
        await session.commit()
        await message.answer(f"–ú–∞—Ä—à—Ä—É—Ç '{route.name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        await log_admin_action(session, message.from_user.id, "add_route", f"{route.name} ({route.distance} –∫–º, {route.elevation} –º)")
    await state.clear()

@dp.message(Command("edit_route"))
async def edit_route_start(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å ID –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ /routes):")
    await state.set_state(EditRouteStates.route_id)

@dp.message(EditRouteStates.route_id)
async def edit_route_id(message: types.Message, state: FSMContext):
    try:
        route_id = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –º–∞—Ä—à—Ä—É—Ç–∞.")
        return
    async with SessionLocal() as session:
        route = await session.get(Route, route_id)
        if not route:
            await message.answer("–ú–∞—Ä—à—Ä—É—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        await state.update_data(route_id=route_id)
        await state.update_data(name=route.name, distance=route.distance, elevation=route.elevation,
                               description=route.description, difficulty=route.difficulty,
                               latitude=route.latitude, longitude=route.longitude)
    await message.answer(
        "–û—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ.\n\n–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞:")
    await state.set_state(EditRouteStates.name)

@dp.message(EditRouteStates.name)
async def edit_route_name(message: types.Message, state: FSMContext):
    if message.text.strip():
        await state.update_data(name=message.text.strip())
    await message.answer("–ù–æ–≤–∞—è –ø—Ä–æ—Ç—è–∂—ë–Ω–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞ (–∫–º):")
    await state.set_state(EditRouteStates.distance)

@dp.message(EditRouteStates.distance)
async def edit_route_distance(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text:
        try:
            distance = float(text.replace(',', '.'))
            if distance <= 0:
                raise ValueError
            await state.update_data(distance=distance)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∫–º), –Ω–∞–ø—Ä–∏–º–µ—Ä: 12.5 –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º.")
            return
    await message.answer("–ù–æ–≤—ã–π —Å—É–º–º–∞—Ä–Ω—ã–π –Ω–∞–±–æ—Ä –≤—ã—Å–æ—Ç—ã (–º):")
    await state.set_state(EditRouteStates.elevation)

@dp.message(EditRouteStates.elevation)
async def edit_route_elevation(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text:
        try:
            elevation = int(text)
            if elevation < 0:
                raise ValueError
            await state.update_data(elevation=elevation)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–º–µ—Ç—Ä—ã), –Ω–∞–ø—Ä–∏–º–µ—Ä: 800 –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º.")
            return
    await message.answer("–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞:")
    await state.set_state(EditRouteStates.description)

@dp.message(EditRouteStates.description)
async def edit_route_description(message: types.Message, state: FSMContext):
    if message.text.strip():
        await state.update_data(description=message.text.strip())
    await message.answer("–ù–æ–≤–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞:")
    await state.set_state(EditRouteStates.difficulty)

@dp.message(EditRouteStates.difficulty)
async def edit_route_difficulty(message: types.Message, state: FSMContext):
    if message.text.strip():
        await state.update_data(difficulty=message.text.strip())
    await message.answer("–ù–æ–≤–∞—è —à–∏—Ä–æ—Ç–∞ (latitude):")
    await state.set_state(EditRouteStates.latitude)

@dp.message(EditRouteStates.latitude)
async def edit_route_latitude(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text:
        try:
            lat = float(text.replace(',', '.'))
            await state.update_data(latitude=lat)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 42.876 –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º.")
            return
    await message.answer("–ù–æ–≤–∞—è –¥–æ–ª–≥–æ—Ç–∞ (longitude):")
    await state.set_state(EditRouteStates.longitude)

@dp.message(EditRouteStates.longitude)
async def edit_route_longitude(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text:
        try:
            lon = float(text.replace(',', '.'))
            await state.update_data(longitude=lon)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 74.605 –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º.")
            return
    data = await state.get_data()
    async with SessionLocal() as session:
        route = await session.get(Route, data["route_id"])
        if not route:
            await message.answer("–û—à–∏–±–∫–∞: –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        route.name = data["name"]
        route.distance = data["distance"]
        route.elevation = data["elevation"]
        route.description = data["description"]
        route.difficulty = data["difficulty"]
        route.latitude = data["latitude"]
        route.longitude = data["longitude"]
        await session.commit()
        await message.answer(f"–ú–∞—Ä—à—Ä—É—Ç '{route.name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
        await log_admin_action(session, message.from_user.id, "edit_route", f"{route.name} (ID {route.id})")
    await state.clear()

@dp.message(Command("new_hike"))
async def new_hike_start(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ö–æ–¥—ã.")
        return
    async with SessionLocal() as session:
        res = await session.execute(select(Route))
        routes = res.scalars().all()
        if not routes:
            await message.answer("–ù–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ –º–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ /add_route.")
            return
        lines = [f"{r.id}. {r.name} ‚Äî {r.distance} –∫–º, {r.elevation} –º" for r in routes]
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç (–≤–≤–µ–¥–∏—Ç–µ ID):\n" + "\n".join(lines))
    await state.set_state(NewHikeStates.route_id)

@dp.message(NewHikeStates.route_id)
async def new_hike_route(message: types.Message, state: FSMContext):
    try:
        route_id = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –º–∞—Ä—à—Ä—É—Ç–∞.")
        return
    async with SessionLocal() as session:
        route = await session.get(Route, route_id)
        if not route:
            await message.answer("–ú–∞—Ä—à—Ä—É—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        await state.update_data(route_id=route_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.08.2024):")
    await state.set_state(NewHikeStates.hike_date)

@dp.message(NewHikeStates.hike_date)
async def new_hike_date(message: types.Message, state: FSMContext):
    try:
        hike_date = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        if hike_date < date.today():
            raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–∏ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º)")
        return
    data = await state.get_data()
    async with SessionLocal() as session:
        hike = Hike(route_id=data["route_id"], date=hike_date)
        session.add(hike)
        await session.commit()
        await message.answer(f"–ü–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {hike_date:%d.%m.%Y}!")
        await log_admin_action(session, message.from_user.id, "new_hike", f"{hike.id}: {route.name} –Ω–∞ {hike_date}")
    await state.clear()

@dp.message(Command("upcoming"))
async def upcoming_hikes(message: types.Message):
    async with SessionLocal() as session:
        q = (
            select(Hike, Route)
            .join(Route, Hike.route_id == Route.id)
            .where(Hike.date >= date.today())
            .order_by(Hike.date.asc())
        )
        hikes = await session.execute(q)
        hikes = hikes.all()
        if not hikes:
            await message.answer("–ë–ª–∏–∂–∞–π—à–∏—Ö –ø–æ—Ö–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        lines = []
        for hike, route in hikes:
            lines.append(f"{hike.date:%d.%m.%Y} ‚Äî {route.name} ({route.distance} –∫–º, {route.elevation} –º)")
        await auto_delete_reply(message, "\n".join(lines))

@dp.message(Command("join"))
async def join_info(message: types.Message):
    await message.answer(
        "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Ö–æ–¥, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–æ–ø–ª–∞—Ç–∞ –∏ –∑–∞–ø–∏—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –õ–°).\n" \
        "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: /admins"
    )

@dp.message(Command("admins"))
async def admins_list(message: types.Message):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–ø–∏—Å–∞—Ç—å username –∞–¥–º–∏–Ω–æ–≤ –∏–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –≤ –ë–î
    # –ü—Ä–∏–º–µ—Ä: ADMINS_USERNAMES = {123456789: 'admin1', 987654321: 'admin2'}
    ADMINS_USERNAMES = {
        123456789: 'admin1',
        987654321: 'admin2',
        # ...
    }
    lines = []
    for admin_id in ADMINS:
        username = ADMINS_USERNAMES.get(admin_id)
        if username:
            lines.append(hlink(f"@{username}", f"https://t.me/{username}"))
        else:
            lines.append(f"ID: {admin_id}")
    await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —Å–≤—è–∑–∏:\n" + "\n".join(lines), parse_mode="HTML")

@dp.message(Command("notify_off"))
async def notify_off(message: types.Message):
    async with SessionLocal() as session:
        res = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = res.scalar_one_or_none()
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
            return
        user.notifications_enabled = 0
        await session.commit()
        await message.answer("üîï –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —Ä–∞—Å—Å—ã–ª–æ–∫. –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /notify_on.")

@dp.message(Command("notify_on"))
async def notify_on(message: types.Message):
    async with SessionLocal() as session:
        res = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = res.scalar_one_or_none()
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
            return
        user.notifications_enabled = 1
        await session.commit()
        await message.answer("üîî –í—ã —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Ä–∞—Å—Å—ã–ª–∫–∏.")

class AddParticipantStates(StatesGroup):
    hike_id = State()
    user_id = State()

@dp.message(Command("add_participant"))
async def add_participant_start(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    async with SessionLocal() as session:
        q = (
            select(Hike, Route)
            .join(Route, Hike.route_id == Route.id)
            .where(Hike.date >= date.today())
            .order_by(Hike.date.asc())
        )
        hikes = await session.execute(q)
        hikes = hikes.all()
        if not hikes:
            await message.answer("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Ö–æ–¥–æ–≤.")
            return
        lines = [f"{hike.id}. {hike.date:%d.%m.%Y} ‚Äî {route.name}" for hike, route in hikes]
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ö–æ–¥ (–≤–≤–µ–¥–∏—Ç–µ ID):\n" + "\n".join(lines))
    await state.set_state(AddParticipantStates.hike_id)

@dp.message(AddParticipantStates.hike_id)
async def add_participant_hike(message: types.Message, state: FSMContext):
    try:
        hike_id = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ—Ö–æ–¥–∞.")
        return
    async with SessionLocal() as session:
        hike = await session.get(Hike, hike_id)
        if not hike:
            await message.answer("–ü–æ—Ö–æ–¥ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        await state.update_data(hike_id=hike_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–∑–Ω–∞—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ /profile –∏–ª–∏ /users):")
    await state.set_state(AddParticipantStates.user_id)

@dp.message(AddParticipantStates.user_id)
async def add_participant_user(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    data = await state.get_data()
    async with SessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        res = await session.execute(select(User).where(User.telegram_id == user_id))
        user = res.scalar_one_or_none()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ
        res2 = await session.execute(
            select(HikeParticipant).where(
                HikeParticipant.hike_id == data["hike_id"],
                HikeParticipant.user_id == user.id
            )
        )
        exists = res2.scalar_one_or_none()
        if exists:
            await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —ç—Ç–æ–≥–æ –ø–æ—Ö–æ–¥–∞.")
            return
        hp = HikeParticipant(hike_id=data["hike_id"], user_id=user.id)
        session.add(hp)
        await session.commit()
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ—Ö–æ–¥–∞!")
    await state.clear()

@dp.message(Command("complete_hike"))
async def complete_hike_start(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –ø–æ—Ö–æ–¥—ã.")
        return
    async with SessionLocal() as session:
        q = (
            select(Hike, Route)
            .join(Route, Hike.route_id == Route.id)
            .where(Hike.date <= date.today())
            .order_by(Hike.date.desc())
        )
        hikes = await session.execute(q)
        hikes = hikes.all()
        if not hikes:
            await message.answer("–ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–æ—Ö–æ–¥–æ–≤.")
            return
        lines = [f"{hike.id}. {hike.date:%d.%m.%Y} ‚Äî {route.name}" for hike, route in hikes]
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ö–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ ID):\n" + "\n".join(lines))
    await state.set_state(CompleteHikeStates.hike_id)

@dp.message(CompleteHikeStates.hike_id)
async def complete_hike_id(message: types.Message, state: FSMContext):
    try:
        hike_id = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ—Ö–æ–¥–∞.")
        return
    async with SessionLocal() as session:
        hike = await session.get(Hike, hike_id)
        if not hike:
            await message.answer("–ü–æ—Ö–æ–¥ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        q = (
            select(HikeParticipant, User)
            .join(User, HikeParticipant.user_id == User.id)
            .where(HikeParticipant.hike_id == hike_id)
        )
        participants = await session.execute(q)
        participants = participants.all()
        if not participants:
            await message.answer("–í —ç—Ç–æ–º –ø–æ—Ö–æ–¥–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
            return
        lines = [f"{user.id} ({user.telegram_id}) ‚Äî {user.name}" for hp, user in participants]
        await message.answer(
            "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ—Ö–æ–¥–∞:\n" + "\n".join(lines) +
            "\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é), –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞:"
        )
    await state.update_data(hike_id=hike_id)
    await state.set_state(CompleteHikeStates.completed_ids)

@dp.message(CompleteHikeStates.completed_ids)
async def complete_hike_done(message: types.Message, state: FSMContext):
    ids_text = message.text.replace(' ', '')
    try:
        ids = [int(x) for x in ids_text.split(',') if x]
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2,3")
        return
    data = await state.get_data()
    hike_id = data["hike_id"]
    async with SessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ö–æ–¥ –∏ –º–∞—Ä—à—Ä—É—Ç
        hike = await session.get(Hike, hike_id)
        route = await session.get(Route, hike.route_id)
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        q = (
            select(HikeParticipant, User)
            .join(User, HikeParticipant.user_id == User.id)
            .where(HikeParticipant.hike_id == hike_id)
        )
        participants = await session.execute(q)
        participants = participants.all()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—à–µ–¥—à–∏—Ö
        for hp, user in participants:
            if user.id in ids:
                hp.completed = 1
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                user.total_distance += route.distance
                user.total_elevation += route.elevation
                user.hikes_count += 1
                user.rank = get_rank(user.hikes_count, user.total_distance)
                # –í complete_hike_done –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º check_achievements —Å–æ–±–∏—Ä–∞—é context:
                # streak (–ø–æ—Ö–æ–¥—ã –ø–æ–¥—Ä—è–¥)
                qstreak = (
                    select(HikeParticipant, Hike)
                    .join(Hike, HikeParticipant.hike_id == Hike.id)
                    .where(HikeParticipant.user_id == user.id, HikeParticipant.completed == 1)
                    .order_by(Hike.date.desc())
                    .limit(3)
                )
                streak_hikes = await session.execute(qstreak)
                streak_hikes = streak_hikes.all()
                streak = 1
                if len(streak_hikes) == 3:
                    dates = [hike.date for hp, hike in streak_hikes]
                    if (dates[0] - dates[1]).days == (dates[1] - dates[2]).days == 1:
                        streak = 3
                # hard_route
                hard_route = route.difficulty.lower() == "—Å–ª–æ–∂–Ω–∞—è"
                # all_routes
                qall = await session.execute(select(Route.id))
                all_route_ids = {r[0] for r in qall}
                quser = await session.execute(
                    select(Hike.route_id)
                    .join(HikeParticipant, HikeParticipant.hike_id == Hike.id)
                    .where(HikeParticipant.user_id == user.id, HikeParticipant.completed == 1)
                )
                user_route_ids = {r[0] for r in quser}
                all_routes = all_route_ids and all_route_ids.issubset(user_route_ids)
                context = {"streak": streak, "hard_route": hard_route, "all_routes": all_routes}
                new_ach = await check_achievements(session, user, context)
                await session.commit()
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                try:
                    msg = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –ø–æ—Ö–æ–¥ '{route.name}' ({route.distance} –∫–º, {route.elevation} –º).\n"
                    msg += f"–í–∞—à –Ω–æ–≤—ã–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂: {user.total_distance:.1f} –∫–º, –ø–æ—Ö–æ–¥–æ–≤: {user.hikes_count}, —Ä–∞–Ω–≥: {user.rank}."
                    if new_ach:
                        msg += "\n\nüéâ –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: " + ", ".join(f"{a.icon} {a.name}" for a in new_ach)
                    await bot.send_message(user.telegram_id, msg)
                except Exception:
                    pass
            else:
                hp.completed = 0
        await session.commit()
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã!")
        await log_admin_action(session, message.from_user.id, "complete_hike", f"hike_id={hike_id}, completed={ids}")
    await state.clear()

@dp.message(Command("leaders"))
async def leaders(message: types.Message):
    async with SessionLocal() as session:
        q = (
            select(User)
            .order_by(User.total_distance.desc(), User.hikes_count.desc())
            .limit(10)
        )
        users = await session.execute(q)
        users = users.scalars().all()
        if not users:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞.")
            return
        lines = [
            f"{i+1}. {u.name} ‚Äî {u.total_distance:.1f} –∫–º, {u.hikes_count} –ø–æ—Ö–æ–¥–æ–≤, —Ä–∞–Ω–≥: {u.rank}"
            for i, u in enumerate(users)
        ]
        await auto_delete_reply(message, "üèÜ –¢–æ–ø-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n" + "\n".join(lines))

@dp.message(Command("broadcast"))
async def broadcast_start(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    await state.set_state(BroadcastStates.text)

@dp.message(BroadcastStates.text)
async def broadcast_send(message: types.Message, state: FSMContext):
    text = message.text.strip()
    async with SessionLocal() as session:
        res = await session.execute(select(User))
        users = res.scalars().all()
        count = 0
        for user in users:
            if getattr(user, 'notifications_enabled', 1) != 1:
                continue
            try:
                await bot.send_message(user.telegram_id, f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ:\n{text}")
                count += 1
            except Exception:
                pass
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await state.clear()
    await log_admin_action(session, message.from_user.id, "broadcast", text)

@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    text = (
        "ü§ñ <b>–ë–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Ö–æ–¥–æ–≤</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/profile ‚Äî –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/history ‚Äî –∏—Å—Ç–æ—Ä–∏—è –ø–æ—Ö–æ–¥–æ–≤\n"
        "/routes ‚Äî —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤\n"
        "/upcoming ‚Äî –±–ª–∏–∂–∞–π—à–∏–µ –ø–æ—Ö–æ–¥—ã\n"
        "/join ‚Äî –∫–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Ö–æ–¥\n"
        "/leaders ‚Äî —Ç–æ–ø-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "/admins ‚Äî —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —Å–≤—è–∑–∏\n"
        "\n<b>–î–ª—è –∞–¥–º–∏–Ω–æ–≤:</b>\n"
        "/add_route ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç\n"
        "/edit_route ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç\n"
        "/new_hike ‚Äî –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ö–æ–¥\n"
        "/add_participant ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ø–æ—Ö–æ–¥\n"
        "/complete_hike ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ—Ö–æ–¥\n"
        "/broadcast ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤—Å–µ–º\n"
        "\n<b>–ü–æ–≥–æ–¥–∞ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b> ‚Äî –±–æ—Ç —Å–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ –ø–æ—Ö–æ–¥–µ –∏ –ø–æ–≥–æ–¥–µ –∑–∞ —Å—É—Ç–∫–∏ –¥–æ —Å–æ–±—ã—Ç–∏—è.\n"
    )
    await auto_delete_reply(message, text, parse_mode="HTML")

@dp.message(Command("edit_stats"))
async def edit_stats_start(message: types.Message, state: FSMContext):
    if message.from_user.id != OWNER_ID:
        await message.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    await state.set_state(EditStatsStates.user_id)

@dp.message(EditStatsStates.user_id)
async def edit_stats_user(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    async with SessionLocal() as session:
        res = await session.execute(select(User).where(User.telegram_id == user_id))
        user = res.scalar_one_or_none()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        await state.update_data(user_id=user_id)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ö–∏–ª–æ–º–µ—Ç—Ä—ã"), KeyboardButton(text="–í—ã—Å–æ—Ç–∞")],
            [KeyboardButton(text="–ü–æ—Ö–æ–¥—ã"), KeyboardButton(text="–†–∞–Ω–≥")],
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
        ], resize_keyboard=True, one_time_keyboard=True
    )
    await message.answer("–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=kb)
    await state.set_state(EditStatsStates.field)

@dp.message(EditStatsStates.field)
async def edit_stats_field(message: types.Message, state: FSMContext):
    field = message.text.lower()
    if field not in ["–∫–∏–ª–æ–º–µ—Ç—Ä—ã", "–≤—ã—Å–æ—Ç–∞", "–ø–æ—Ö–æ–¥—ã", "—Ä–∞–Ω–≥", "–æ—Ç–º–µ–Ω–∞"]:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return
    if field == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
        await state.clear()
        return
    await state.update_data(field=field)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", reply_markup=main_menu)
    await state.set_state(EditStatsStates.value)

@dp.message(EditStatsStates.value)
async def edit_stats_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data["user_id"]
    field = data["field"]
    value = message.text.strip()
    async with SessionLocal() as session:
        res = await session.execute(select(User).where(User.telegram_id == user_id))
        user = res.scalar_one_or_none()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        if field == "–∫–∏–ª–æ–º–µ—Ç—Ä—ã":
            try:
                user.total_distance = float(value)
            except ValueError:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
                return
        elif field == "–≤—ã—Å–æ—Ç–∞":
            try:
                user.total_elevation = int(value)
            except ValueError:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
                return
        elif field == "–ø–æ—Ö–æ–¥—ã":
            try:
                user.hikes_count = int(value)
            except ValueError:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
                return
        elif field == "—Ä–∞–Ω–≥":
            user.rank = value
        await session.commit()
        await message.answer(f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=main_menu)
    await state.clear()

async def main():
    print("Polling –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è!")
    import asyncio
    asyncio.create_task(send_hike_reminders())
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main()) 